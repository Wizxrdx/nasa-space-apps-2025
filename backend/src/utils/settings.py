from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent.parent
MODELS_DIR = BASE_DIR / "models"
MODELS_DIR.mkdir(parents=True, exist_ok=True)
COLUMNS = [
    'star_rad',
    'st_meterr2',
    'koi_fpflag_ss',
    'koi_impact_err1',
    'orb_period',
    'koi_duration_err1',
    'koi_depth',
    'sy_vmagerr2',
    'koi_insol',
    'sy_disterr2',
    'sy_snum',
    'sy_gaiamagerr1',
    'pl_trandurherr2',
    'sy_disterr1',
    'star_logg',
    'koi_duration',
    'koi_insol_err1',
    'koi_model_snr',
    'st_disterr2',
    'star_teff',
    'pl_tranmiderr2',
    'pl_radjlim',
    'pl_orbsmax',
    'sy_pnum',
    'st_masslim',
    'st_metlim',
    'sy_vmag',
    'pl_trandurherr1',
    'koi_fpflag_ec',
    'pl_orbsmaxlim',
    'tce_q1_q17_dr25_tce',
    'st_distlim',
    'st_pmralim',
    'st_pmraerr1',
    'star_teff_err2',
    'star_rad_err1',
    'pl_orbsmaxerr2',
    'st_mass',
    'tce_q1_q17_dr24_tce',
    'ttv_flag',
    'pl_tranmid',
    'st_dist',
    'st_pmdec',
    'sy_gaiamagerr2',
    'st_masserr2',
    'sy_dist',
    'pl_trandeperr2',
    'sy_vmagerr1',
    'koi_duration_err2',
    'orb_period_err2',
    'koi_teq',
    'planet_radius',
    'st_tefflim',
    'star_logg_err2',
    'koi_impact_err2',
    'st_radlim',
    'star_logg_err1',
    'pl_radj',
    'koi_time0bk',
    'koi_time0bk_err1',
    'st_meterr1',
    'pl_trandurh',
    'pl_orbsmaxerr1',
    'sy_kmagerr1',
    'koi_fpflag_co',
    'st_tmagerr1',
    'dec',
    'sy_kmagerr2',
    'koi_fpflag_nt',
    'koi_insol_err2',
    'kepmag',
    'star_teff_err1',
    'sy_gaiamag',
    'koi_depth_err1',
    'ra',
    'pl_tranmiderr1',
    'st_met',
    'koi_depth_err2',
    'koi_tce_plnt_num',
    'st_masserr1',
    'star_rad_err2',
    'pl_eqt',
    'st_pmdeclim',
    'pl_trandurhlim',
    'st_logglim',
    'pl_radjerr2',
    'st_pmdecerr2',
    'pl_insol',
    'pl_radjerr1',
    'orb_period_err1',
    'planet_radius_err1',
    'st_tmag',
    'sy_kmag',
    'st_pmdecerr1',
    'st_pmra',
    'pl_tranmidlim',
    'pl_orbperlim',
    'st_pmraerr2',
    'st_tmagerr2',
    'st_tmaglim',
    'koi_time0bk_err2',
    'st_disterr1',
    'pl_trandep',
    'pl_radelim',
    'planet_radius_err2',
    'default_flag',
    'pl_trandeperr1',
    'pl_trandeplim',
    'koi_impact'
]

LABEL_MAP = {0: "CONFIRMED", 1: "CANDIDATE", 2: "FALSE POSITIVE"}  # map numbers -> strings

# Map numeric predictions to string labels for output
def _to_label(v):
    try:
        iv = int(v)
        if float(v) == float(iv):
            return LABEL_MAP.get(iv, str(iv))
    except Exception:
        pass
    return str(v)